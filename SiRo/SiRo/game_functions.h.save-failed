#ifndef GAME_FUNCTIONS_H
#define GAME_FUNCTIONS_H

void generate_field()
{
    srand(time(NULL));
    for(int i = 0 ; i < SCREEN_SYMH; i++)
    {
        for(int j = 0 ; j < SCREEN_SYMW; j++)
        {
            if(i == 0 || j == 0 || i == SCREEN_SYMH - 1 || j == SCREEN_SYMW - 1)
            {
                field[i][j] = 1;
            }
            else
            {
                field[i][j] = 0;
            }
            item_field[i][j] = 0;
            npc_field[i][j] = 0;
        }
    }
    npc_field[player_y][player_x] = -1;
    creature_base.clear();
    item_base.clear();
}

void apply_effect(int effect,int effect_str,ITEM (*inventory)[inventory_size])
{
    renew_stats();
    std::string msg = "E:";
    if(effect == EFFECT_HEAL)
    {
        player_lp += effect_str;
        msg+="heal"+int_to_string(effect_str,true);
        if(effect_str < 0)
        {
            killers.push_back("Your carelessness");
        }
    }
    if(effect == EFFECT_SPUP)
    {
        player_sp+=effect_str;
        msg+="spup"+int_to_string(effect_str,true);
    }
    if(effect == EFFECT_TPUP)
    {
        player_tp+=effect_str;
        msg+="tpup"+int_to_string(effect_str,true);
    }
    if(effect == EFFECT_UNCURSE)
    {
        player_current_armor.set_cursed(0);
        player_current_weapon.set_cursed(0);
        (*inventory)[using_armor_inventory_index].set_cursed(0);
        (*inventory)[using_weapon_inventory_index].set_cursed(0);
        msg+="uncurse";
    }
    if(effect == EFFECT_CURSE)
    {
        player_current_armor.set_cursed(1);
        player_current_weapon.set_cursed(1);
        (*inventory)[using_armor_inventory_index].set_cursed(1);
        (*inventory)[using_weapon_inventory_index].set_cursed(1);
        msg+="curse";
    }
    if(effect == EFFECT_POLYMORPH)
    {
        symbol_code[2] = alphabet[std::rand()%alphabet_size];
        for(std::map<int,CREATURE>::iterator it = creature_base.begin(); it != creature_base.end(); it++)
        {
            it->second.change_rep(-effect_str);
        }
        msg+="poly"+int_to_string(effect_str,true);
    }
    if(effect == EFFECT_SPAWN)
    {
        put_creature_to_map(CREATURE(creature_stamps[std::rand() % effect_str + 1][std::rand() % creature_stamps[effect_str].size()],player_x + 1,player_y + 1,ITEM()),player_x + 1,player_y+1);
        put_creature_to_map(CREATURE(creature_stamps[std::rand() % effect_str + 1][std::rand() % creature_stamps[effect_str].size()],player_x + 1,player_y - 1,ITEM()),player_x + 1,player_y-1);
        put_creature_to_map(CREATURE(creature_stamps[std::rand() % effect_str + 1][std::rand() % creature_stamps[effect_str].size()],player_x - 1,player_y - 1,ITEM()),player_x - 1,player_y-1);
        put_creature_to_map(CREATURE(creature_stamps[std::rand() % effect_str + 1][std::rand() % creature_stamps[effect_str].size()],player_x - 1,player_y + 1,ITEM()),player_x - 1,player_y+1);
        msg+="spawn"+int_to_string(effect_str,true);
    }
    if(effect == EFFECT_BLAST)
    {
        int blast_radius = std::abs(effect_str);
        for(int i = player_x - blast_radius; i < player_x + blast_radius; i++)
        {
            for(int j = player_y - blast_radius; j < player_y + blast_radius; j++)
            {
                if(item_field[j][i] != 0)
                {
                    item_base.erase(item_field[j][i]);
                    item_field[j][i] = 0;
                }
                if(npc_field[j][i] != 0)
                {
                    if(npc_field[j][i] == -1)
                    {
                        int pq;
                        if(-effect_str <= 0)
                            pq = -effect_str;
                        else
                            pq = std::max(0,- effect_str - player_def);
                        player_hit += pq;
                    }
                    else
                    {
                        creature_base[npc_field[j][i]].deal_damage(effect_str);
                        message("B"+int_to_string(effect_str,true)+"t:"+creature_base[npc_field[j][i]].get_name()+"|");
                        creature_base[npc_field[j][i]].change_rep(2);
                        if(!creature_base[npc_field[j][i]].alive())
                        {
                            message("K:"+creature_base[npc_field[j][i]].get_name()+"|");
                            creature_base.erase(npc_field[j][i]);
                            npc_field[j][i] = 0;
                        }
                    }
                }
            }
        }
        msg+="blast"+int_to_string(effect_str,true);
    }
    msg+="|";
    renew_stats();
    message(msg);
}

bool use_item(ITEM item,ITEM (*inventory)[inventory_size],int inventory_current_size,int index)
{
    if(item.is_using() == 0)
    {
        if(item.get_type() == TYPE_WEAPON || item.get_type() == TYPE_THROWABLE)
        {
            if(weapon_on && (*inventory)[using_weapon_inventory_index].get_cursed())
            {
                return false;
            }
            if(weapon_on)
            {
                (*inventory)[using_weapon_inventory_index].deselect();
            }
            player_current_weapon = item;
            weapon_on = true;
            using_weapon_inventory_index = index;
            renew_stats();
            return true;
        }
        if(item.get_type() == TYPE_ARMOR)
        {
            if(armor_on && (*inventory)[using_armor_inventory_index].get_cursed())
            {
                return false;
            }
            if(armor_on)
            {
                (*inventory)[using_armor_inventory_index].deselect();
            }
            player_current_armor = item;
            using_armor_inventory_index = index;
            armor_on = true;
            renew_stats();
            return true;
        }
        if(item.get_type() == TYPE_POTION)
        {
            apply_effect(item.get_effect(),item.get_effect_str(),inventory);
            renew_stats();
            return true;
        }
    }
    else
    {
        if(item.get_type() == TYPE_WEAPON || item.get_type() == TYPE_THROWABLE)
        {
            weapon_on = false;
            renew_stats();
            return true;
        }
        if(item.get_type() == TYPE_ARMOR)
        {
            armor_on = false;
            renew_stats();
            return true;
        }
    }
    return false;
}

void turn()
{
    for(std::map<int,CREATURE>::iterator it = creature_base.begin(); it != creature_base.end(); it++)
    {
        if(!it->second.alive())
        {
            npc_field[it->second.get_y()][it->second.get_x()] = 0;
            int coiny = std::rand()%100 + 1;
            if(coiny <= it->second.get_drop_chance())
            {
                put_item_to_map(it->second.get_drop(),it->second.get_x(),it->second.get_y());
            }
            creature_base.erase(it);
            it = creature_base.begin();
        }
        it->second.move_creature();
    }
}

void inventory_menu(ITEM (*inventory)[inventory_size], int *current_inventory_size,int x,int y)
{
    bool inventory_running  = 1;
    do
    {
        show_inventory(inventory,*current_inventory_size);
        int i_key = tgetch();
        if(i_key == K_d)
        {
            int selected_el = inventory_select_item("DROP",inventory,*current_inventory_size);
            if(selected_el != -1)
            {
                if(!((*inventory)[selected_el].is_using() && (*inventory)[selected_el].get_cursed()))
                {
                    if(put_item_to_map((*inventory)[selected_el],x,y) != -1)
                    {
                        if((*inventory)[selected_el].is_using())
                        {
                            if(use_item((*inventory)[selected_el],inventory,*current_inventory_size,selected_el))
                            {
                                (*inventory)[selected_el].deselect();
                            }
                        }
                        if(using_armor_inventory_index > selected_el)
                        {
                            using_armor_inventory_index--;
                        }
                        if(using_weapon_inventory_index > selected_el)
                        {
                            using_weapon_inventory_index--;
                        }
                        if((*inventory)[selected_el].get_name() == "Coiny's coin")
                            coin_count--;
                        for(int q = selected_el; q < *current_inventory_size - 1; q++)
                        {
                            (*inventory)[q] = (*inventory)[q+1];
                        }
                        (*current_inventory_size)--;
                    }
                }
            }
        }
        else if(i_key == K_u)
        {
            int selected_el = inventory_select_item("USE",inventory,*current_inventory_size);
            if(selected_el != -1)
            {
                if(!((*inventory)[selected_el].is_using() && (*inventory)[selected_el].get_cursed()))
                {
                    system("pause");
                    if(use_item((*inventory)[selected_el],inventory,(*current_inventory_size),selected_el))
                    {
                        system("pause");
                        (*inventory)[selected_el].use();
                        if((*inventory)[selected_el].get_oneusable() && (*inventory)[selected_el].get_type() != TYPE_THROWABLE)
                        {
                            for(int q = selected_el; q < *current_inventory_size - 1; q++)
                            {
                                (*inventory)[q] = (*inventory)[q+1];
                            }
                            (*current_inventory_size)--;
                        }
                    }
                }
            }
        }
        else if(i_key == K_q)
        {
            inventory_running = 0;
        }
    }
    while(inventory_running);
}

void redraw_screen()
{
    COORD topLeft  = { 0, 0 };
    SetConsoleCursorPosition(hConsole, topLeft);
    TCHAR rfield[(SCREEN_SYMW + 1) * SCREEN_SYMH];
    int rfield_pos = 0;
    int symc=0;
    int lattr = -1;
    DWORD dwBuff;
    for(int i = 0 ; i < SCREEN_SYMH; i++)
    {
        for(int j = 0 ; j < SCREEN_SYMW; j++)
        {
            int tattr;
            char nsym;
            if(npc_field[i][j] != 0)
            {
                if(npc_field[i][j] == -1)
                {
                    nsym = symbol_code[2];
                    tattr = symbol_attr[2];
                }
                else
                {
                    nsym = creature_base[npc_field[i][j]].get_type();
                    tattr = symbol_attr[4];
                }
            }
            else if(item_field[i][j] != 0)
            {
                nsym = symbol_code[3];
                tattr = symbol_attr[3];
            }
            else
            {
                nsym = symbol_code[field[i][j]];
                tattr = symbol_attr[field[i][j]];
            }
            if(tattr != lattr && lattr != -1)
            {
                SetConsoleTextAttribute(hConsole,lattr);
                WriteConsole(hConsole,&rfield,symc,&dwBuff,NULL);
                rfield_pos = 0;
                symc = 0;
            }
            lattr = tattr;
            rfield[rfield_pos++] = nsym;
            symc++;
        }
        rfield[rfield_pos++] = '\n';
        symc++;
    }
    SetConsoleTextAttribute(hConsole,lattr);
    WriteConsole(hConsole,&rfield,symc,&dwBuff,NULL);
    SetConsoleTextAttribute(hConsole,15);
    message_out();
    hide_cursor();
}

void spawn_wave(int level)
{
    if(level > max_level)
        level = max_level;
    message("SWl:"+int_to_string(level,false)+"|");
    for(int i = 0; i < wave_spawn_coords_size; i++)
    {
        CREATURE_STAMP spawn_creature_stamp = creature_stamps[std::rand() % level + 1][std::rand() % creature_stamps[level].size()];
        ITEM spawn_drop = item_library[spawn_creature_stamp.creature_drop[std::rand()%spawn_creature_stamp.creature_drop.size()]].second;
        if(spawn_drop.get_type() != TYPE_POTION && spawn_drop.get_type() != TYPE_COLLECTIBLE)
        {
            spawn_drop.set_atk(std::rand() % (spawn_drop.get_level()*2));
            spawn_drop.set_def(std::rand() % (spawn_drop.get_level()*2));
        }
        CREATURE spawn_creature = CREATURE(spawn_creature_stamp,wave_spawn_coords[i][0],wave_spawn_coords[i][1],spawn_drop);
        put_creature_to_map(spawn_creature,wave_spawn_coords[i][0],wave_spawn_coords[i][1]);
    }
}

void move_player(int nx, int ny)
{
    if(npc_field[ny][nx] == 0 && field[ny][nx] != 1 && ny >= 0 && nx >= 0 && nx <= SCREEN_SYMW - 1 && ny <= SCREEN_SYMH - 1)
    {
        npc_field[player_y][player_x] = 0;
        player_lx = player_x;
        player_ly = player_y;
        player_x = nx;
        player_y = ny;
        npc_field[player_y][player_x] = -1;
        if(item_field[player_y][player_x] != 0)
        {
            message("S:"+item_base[item_field[player_y][player_x]].get_name()+"|");
        }
    }
    else if(npc_field[ny][nx] != 0)
    {
        creature_base[npc_field[ny][nx]].deal_damage(player_atk);
        message("A"+int_to_string(player_atk,true)+"t:"+creature_base[npc_field[ny][nx]].get_name()+"|");
        creature_base[npc_field[ny][nx]].change_rep(1);
        if(!creature_base[npc_field[ny][nx]].alive())
        {
            message("K:"+creature_base[npc_field[ny][nx]].get_name()+"|");
            int coiny = std::rand()%100 + 1;
            if(coiny <= creature_base[npc_field[ny][nx]].get_drop_chance())
            {
                put_item_to_map(creature_base[npc_field[ny][nx]].get_drop(),nx,ny);
                creature_base.erase(npc_field[ny][nx]);
                npc_field[ny][nx] = 0;
            }
            else
            {
                creature_base.erase(npc_field[ny][nx]);
                npc_field[ny][nx] = 0;
            }
        }
    }
}

void show_stats(int atk,int def,int lp,int sp,int tp,int max_lp,int ep,int max_ep,std::string script_name)
{
    draw_frame();
    std::string stat_line = "ATK : " + int_to_string(atk,false);
    write_line_attr(stat_line,1,1,FOREGROUND_RED|FOREGROUND_INTENSITY);
    stat_line = "DEF : " + int_to_string(def,false);
    write_line_attr(stat_line,1,2,FOREGROUND_BLUE|FOREGROUND_INTENSITY);
    stat_line = "LP  : " + int_to_string(lp,false) + "/" + int_to_string(max_lp,false);
    write_line_attr(stat_line,1,3,FOREGROUND_GREEN|FOREGROUND_INTENSITY);
    stat_line = "EP  : " + int_to_string(ep,false) + "/" + int_to_string(max_ep,false);
    write_line_attr(stat_line,1,4,FOREGROUND_RED|FOREGROUND_GREEN|FOREGROUND_INTENSITY);
    stat_line = "SP  : " + int_to_string(sp,false);
    write_line_attr(stat_line,1,5,FOREGROUND_BLUE|FOREGROUND_GREEN|FOREGROUND_INTENSITY);
    stat_line = "TP  : " + int_to_string(tp,false);
    write_line_attr(stat_line,1,6,FOREGROUND_RED|FOREGROUND_BLUE|FOREGROUND_INTENSITY);
    stat_line = "WEP  : ";
    if(weapon_on)
    {
        stat_line+=player_current_weapon.get_name();
        stat_line+=" : ATK";
        stat_line+=int_to_string(player_current_weapon.get_atk(),true);
    }
    else
    {
        stat_line+=" NONE";
    }
    write_line_attr(stat_line,1,8,FOREGROUND_RED | BACKGROUND_WHITE|FOREGROUND_INTENSITY);
    stat_line = "ARM  : ";
    if(armor_on)
    {
        stat_line+=player_current_armor.get_name();
        stat_line+=" : DEF";
        stat_line+=int_to_string(player_current_armor.get_def(),true);
    }
    else
    {
        stat_line+=" NONE";
    }
    write_line_attr(stat_line,1,9,FOREGROUND_BLUE | BACKGROUND_WHITE|FOREGROUND_INTENSITY);
    stat_line = "SPT  :  " + script_name;
    write_line_attr(stat_line,1,10,FOREGROUND_GREEN|BACKGROUND_WHITE | FOREGROUND_INTENSITY);
    message_out();
    hide_cursor();
}

bool throw_weapon(int x,int y,ITEM weapon)
{
    if(npc_field[y][x] != 0 && npc_field[y][x] != -1)
    {
        creature_base[npc_field[y][x]].deal_damage(player_atk);
        message("A"+int_to_string(player_atk,true)+"t:"+creature_base[npc_field[y][x]].get_name()+"|");
        creature_base[npc_field[y][x]].change_rep(1);
        if(!creature_base[npc_field[y][x]].alive())
        {
            message("K:"+creature_base[npc_field[y][x]].get_name()+"|");
            int coiny = std::rand()%100 + 1;
            if(coiny <= creature_base[npc_field[y][x]].get_drop_chance())
            {
                put_item_to_map(creature_base[npc_field[y][x]].get_drop(),x,y);
                creature_base.erase(npc_field[y][x]);
                npc_field[y][x] = 0;
            }
            else
            {
                creature_base.erase(npc_field[y][x]);
                npc_field[y][x] = 0;
            }
        }
        message("THROWED|");
        return true;
    }
    return false;
}

bool throw_menu(ITEM weapon)
{
    bool throwing = true;
    int x = player_x;
    int y = player_y;
    while(throwing)
    {
        redraw_screen();
        int rx = x;
        int ry = y;
        while(rx != player_x || player_y != ry){
            write_line_attr(",",rx,ry,BACKGROUND_GREEN);
            if(player_y < ry){
                ry--;
            }else if(player_y > ry){
                ry++;
            }
            if(player_x < rx){
                rx--;
            }else if(player_x > rx){
                rx++;
            }

        }
        write_line_attr("X",x,y,BACKGROUND_GREEN);
        int key = tgetch();
        if(key == K_ENTER)
        {
            if(throw_weapon(x,y,weapon))
            {
                return true;
            }
        }
        if(key == K_q)
        {
            return false;
        }
        if(key == K_DOWN)
        {
            if(abs(player_x - x)*abs(player_x - x) + abs(player_y - (y+1))*abs(player_y - (y+1)) <= weapon.get_rng()*weapon.get_rng())
                y++;
        }
        if(key == K_UP)
        {
            if(abs(player_x - x)*abs(player_x - x) + abs(player_y - (y-1))*abs(player_y - (y-1)) <= weapon.get_rng()*weapon.get_rng())
                y--;
        }
        if(key == K_RIGHT)
        {
            if(abs(player_x - (x-1))*abs(player_x - (x-1)) + abs(player_y - y)*abs(player_y - y) <= weapon.get_rng()*weapon.get_rng())
                x--;
        }
        if(key == K_LEFT)
        {
            if(abs(player_x - (x+1))*abs(player_x - (x+1)) + abs(player_y - y)*abs(player_y - y) <= weapon.get_rng()*weapon.get_rng())
                x++;
        }
        if(x < 0)
            x = 0;
        if(x > SCREEN_SYMW - 1)
            x = SCREEN_SYMW - 1;
        if(y < 0)
            y = 0;
        if(y > SCREEN_SYMH - 1)
            y = SCREEN_SYMH - 1;
    }
}

void start_game()
{
    bool main_game_running = 1;
    int last_key = 0;
    ITEM inventory[inventory_size];
    int inventory_current_size = 0;
    strcpy(symbol_code, symbol_code_bk);
    player_lp = 10;
    player_tp = 0;
    player_sp = 1;
    player_def = 0;
    player_atk = 1;
    coin_count = 0;
    player_max_lp = 10 + player_lp;
    renew_stats();
    wave_timer = 0;
    wave_interval = 100;
    next_wave = 0;
    wave_level = 0;
    wave_count = 0;
    wave_level_up_interval = 3;
    wave_next_level_up = 0;
    SCRIPT player_script = SCRIPT("Quqed script",ANIMATION_ARROW,FOREGROUND_GREEN,SCRIPT_ARROW,1,0,1);
    weapon_on = false;
    armor_on = false;
    player_x = SCREEN_SYMW / 2;
    player_y = SCREEN_SYMH / 2;
    player_max_ep = 10;
    player_ep = player_max_ep;
    renew_stats();
    player_hit = 0;
    redraw_screen();
    message("STARTED NEW GAME|");
    redraw_screen();
    bool gameOver = false;
    generate_field();
    put_item_to_map(item_library[35].second,player_x,player_y);
    while(main_game_running)
    {
        killers.clear();
        if(wave_timer >= next_wave)
        {
            if(wave_count >= wave_next_level_up)
            {
                wave_level++;
                wave_next_level_up = wave_count + wave_level_up_interval;
                wave_level_up_interval*=2;
            }
            next_wave = wave_timer + wave_interval;
            wave_interval += wave_level * 10;
            spawn_wave(wave_level);
            wave_count++;
        }
        redraw_screen();
        last_key = tgetch();
        if(last_key == K_UP)
        {
            move_player(player_x,player_y - 1);
            turn();
        }
        if(last_key == K_DOWN)
        {
            move_player(player_x,player_y + 1);
            turn();
        }
        if(last_key == K_LEFT)
        {
            move_player(player_x + 1,player_y);
            turn();
        }
        if(last_key == K_RIGHT)
        {
            move_player(player_x - 1,player_y);
            turn();
        }
        if(last_key == K_ENTER)
        {
            turn();
        }
        if(last_key == K_q)
        {
            quit_to_main_menu();
        }
        if(last_key == K_p)
        {
            if(pick_up(&inventory, inventory_current_size,player_x,player_y))
            {
                if(inventory[inventory_current_size].get_name() == "Coiny's coin")
                    coin_count++;
                inventory_current_size++;
            }
        }
        if(last_key == K_i)
        {
            inventory_menu(&inventory,&inventory_current_size,player_x,player_y);
        }
        if(last_key == K_s)
        {
            show_stats(player_atk,player_def,player_lp,player_sp,player_tp,player_max_lp,player_ep,player_max_ep,player_script.get_name());
            tgetch();
        }
        if(last_key == K_t)
        {
            if(weapon_on && player_current_weapon.get_type() == TYPE_THROWABLE)
            {
                if(!player_current_weapon.get_oneusable() && throw_menu(player_current_weapon))
                {
                    player_current_weapon.prouse();
                    inventory[using_weapon_inventory_index].prouse();
                    renew_stats();
                    turn();
                }
            }
        }
        if(last_key == K_e){
            if(player_ep - player_script.get_eq() >= 0){
                if(player_script.get_type() == SCRIPT_TYPE_TARGET){
                    player_script.exec(player_x,player_y,player_x + 10 * (std::rand()%3 - 1) + std::rand() % 13,player_y + 10* (std::rand()%3 - 1) + std::rand() % 13);
                }
                message("SCRIPT EXEC|");
                player_ep -= player_script.get_eq();
                turn();
            }
        }
        player_lp -= player_hit;
        player_ep += player_hit;
        if(player_ep < 0)player_ep = 0;
        if(player_ep > player_max_ep)player_ep = player_max_ep;
        player_hit = 0;
        if(player_lp <= 0)
        {
            main_game_running = false;
            gameOver = true;
        }
        wave_timer++;
        if(coin_count == 3){
            message("TUTURU|");
            int coin = std::rand() % 100 + 1;
            inventory[0] = inventory[coin % inventory_current_size];
            inventory[0].set_atk( - inventory[0].get_atk() * (coin % 3));
            inventory[0].set_def( - inventory[0].get_def() * (coin % 3));
            if(coin % 2 == 0){
                inventory[0].set_type(TYPE_ARMOR);
            }else{
                inventory[0].set_type(TYPE_WEAPON);
            }
            inventory_current_size = 1;
        }
        renew_stats();
    }
    if(gameOver)
    {
        game_over();
    }
}

#endif // GAME_FUNCTIONS_H
