
import pygame as pg
import random
import os
os.environ['SDL_VIDEO_WINDOW_POS'] = "0,30"

pg.init()

mgl = 1

fh = 0
fw = 0

tsi = 20

def draw_ghost(ghost):
    i = ghost.x
    j = ghost.y
    pg.draw.rect(screen, ghost.col,
                            ((tsi * i + 1, tsi * j + 19), (18, 2)), 0)
    pg.draw.rect(screen, ghost.col,
                            ((tsi * i + 1, tsi * j + 3), (2, 16)), 0)
    pg.draw.rect(screen, ghost.col,
                            ((tsi * i + 17, tsi * j + 3), (2, 16)), 0)
    pg.draw.rect(screen, ghost.col,
                            ((tsi * i + 3, tsi * j + 1), (14, 2)), 0)


def draw_tile(i, j):
    if field[i][j] == 1:
        if i > 0 and field[i - 1][j] == 1:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i, tsi * j + 4), (6, 2)), 0)
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i, tsi * j + 14), (6, 2)), 0)
        else:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 4, tsi * j + 6), (2, 8)), 0)
        if j > 0 and field[i][j - 1] == 1:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 4, tsi * j), (2, 6)), 0)
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 14, tsi * j), (2, 6)), 0)
        else:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 6, tsi * j + 4), (8, 2)), 0)
        if i < fh - 1 and field[i + 1][j] == 1:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 14, tsi * j + 4), (6, 2)), 0)
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 14, tsi * j + 14), (6, 2)), 0)
        else:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 14, tsi * j + 6), (2, 8)), 0)
        if j < fw - 1 and field[i][j + 1] == 1:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 4, tsi * j + 14), (2, 6)), 0)
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 14, tsi * j + 14), (2, 6)), 0)
        else:
            pg.draw.rect(screen, (0, 0, 255),
                            ((tsi * i + 6, tsi * j + 14), (8, 2)), 0)
    if field[i][j] == 2:
        pg.draw.rect(screen, (255, 255, 255),
                        ((tsi * i + 8, tsi * j + 8), (4, 4)), 0)
    if field[i][j] == 3:
        pg.draw.rect(screen, (255, 255, 100),
                        ((tsi * i + 6, tsi * j + 6), (8, 8)), 0)
        

def draw_pac(i,j):
    pg.draw.rect(screen, (255, 255, 0),
                            ((tsi * i + 3, tsi * j + 17), (14, 2)), 0)
    pg.draw.rect(screen, (255, 255, 0),
                            ((tsi * i + 1, tsi * j + 3), (2, 14)), 0)
    pg.draw.rect(screen, (255, 255, 0),
                            ((tsi * i + 17, tsi * j + 3), (2, 14)), 0)
    pg.draw.rect(screen, (255, 255, 0),
                            ((tsi * i + 3, tsi * j + 1), (14, 2)), 0)

def draws():
    screen.fill((0, 0, 0))
    for i in range(fh):
        for j in range(fw):
            draw_tile(i,j)
    draw_pac(px,py)
    
    for ghost in ghosts:
        draw_ghost(ghost)
    pg.display.update()


def move(x, y, np):
    lx = x
    ly = y
    x += nma[np][1]
    y += nma[np][0]
    if(field[x][y] == 1):
        x = lx
        y = ly
    return (x, y)


def rlist():
    perm = [0, 1, 2, 3]
    rnd = random.randint(0, 10)
    for i in range(rnd):
        ra = random.randint(0, len(perm) - 1)
        rb = random.randint(0, len(perm) - 1)
        a = perm[ra]
        perm[ra] = perm[rb]
        perm[rb] = a
    return perm


def btur(mx, my, tax, tay, fordots):
    global nma
    bnap = -1
    trgap = 100000000
    for i in [0, 1, 2, 3]:
        if field[mx + nma[i][1]][my + nma[i][0]] != 1:
            que = [[mx + nma[i][1], my + nma[i][0], 0]]
            alr = set()
            for dot in fordots:
                alr.add(dot)
            rs = 1000000000
            while len(que) > 0:
                tx = que[0][0]
                ty = que[0][1]
                td = que[0][2]
                if(tx == tax and ty == tay):
                    rs = td
                    break
                que.pop(0)
                for j in [0, 1, 2, 3]:
                    if field[tx + nma[j][1]][ty + nma[j][0]] != 1 and (tx + nma[j][1], ty + nma[j][0]) not in alr:
                        que.append([tx + nma[j][1], ty + nma[j][0], td+1])
                        alr.add((tx + nma[j][1], ty + nma[j][0]))
            if(trgap > rs):
                trgap = rs
                bnap = i
    return bnap


class Ghost():
    def __init__(self, x, y, nap, int, col):
        self.x = x
        self.y = y
        self.nap = nap
        self.int = int
        self.col = col
        self.scol = col
        self.f = 0

    def proc(self):
        if(self.f > 0):
            ql = [np for np in rlist() if field[self.x + nma[np][1]][self.y + nma[np][0]] != 1]
            nnap = random.choice(ql)
            if field[self.x + nma[self.nap][1]][self.y + nma[self.nap][0]] == 1 or random.randint(0,100) < 20:
                self.nap = nnap
            self.f -= 1
            self.col = (random.randint(0,255),random.randint(0,255),random.randint(0,255))
        else:
            self.col = self.scol
            if(self.int == 0):
                pass
            elif(self.int == 1):
                sd = btur(
                    self.x, self.y, px + nma[nap][1] * 4, py + nma[nap][0] * 4, [(px, py)])
                if(sd == -1):
                    sd = btur(self.x, self.y, px, py,  [])
                self.nap = sd
            elif(self.int == 2):
                self.nap = btur(self.x, self.y, px, py, [])
            elif(self.int == 3):
                sd = btur(self.x, self.y, px +
                                nma[nap][1], py + nma[nap][0], [(px, py)])
                if(sd == -1):
                    sd = btur(self.x, self.y, px, py,  [])
                self.nap = sd
            elif(self.int == 4):
                pass

    def move(self):
        self.x, self.y = move(self.x, self.y, self.nap)

    def frighten(self):
        self.f = 15

levels = [
    [[Ghost(13, 13, 0, 2, (255, 0, 255))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
      [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
      [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1],
      [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1],
      [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,175,100]
    ],
    [[Ghost(19,19,0,2,(255,255,255))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,150,100]

        ]
    ,
    [[Ghost(19,19,0,1,(30,30,30))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1], [1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1], [1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,175,100]
     ],
    [[Ghost(13,13,0,2,(0,255,0))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,100,50]

        ],
    [[Ghost(29,9,0,2,(0,255,255))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
    [1,1,50,20]
        ],
    [[Ghost(1, 19, 0, 2, (255, 0, 0)),Ghost(19, 1, 0, 1, (255, 0, 0))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 2, 1, 1, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 1, 1, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 1, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,175,100]
        ],
    [[Ghost(1, 29, 0, 2, (255, 0, 255)),Ghost(29, 1, 0, 1, (255, 0, 0))],
     [[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 2, 2, 1, 1, 2, 1, 2, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 1, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1], [1, 2, 1, 1, 1, 2, 1, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 1, 2, 2, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1], [1, 2, 1, 2, 1, 2, 2, 2, 2, 1, 2, 1, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1], [1, 2, 2, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1], [1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1], [1, 2, 1, 1, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 2, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 1, 1, 2, 1], [1, 2, 1, 2, 1, 1, 1, 2, 1, 1, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1], [1, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 2, 2, 1, 2, 1], [1, 2, 1, 1, 1, 1, 1, 2, 1, 2, 1, 1, 1, 2, 1, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 1], [1, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 1], [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
     [1,1,200,100]
    ]
    ]

nma = [
        [0, 1],
        [1, 0],
        [0, -1],
        [-1, 0]
        ]

tlvl = 1

for q in range(0,100):
    i = levels[q]
    loop = 1
    field = i[1]

    score = 0

    fh = len(i[1])
    fw = len(i[1][0])
    screen = pg.display.set_mode((fh * tsi, fw * tsi), pg.FULLSCREEN)
    px = i[2][0]
    py = i[2][1]

    nap = 1
    nnap = nap

    reft = 0
    teft = 0
    ghov = i[2][2]
    plav = i[2][3]

    ghosts = i[0]
    alive = 1
    oscore = 0
    for line in field:
        for cell in line:
            if(cell == 2):
                oscore += 1
    while loop:
        for ev in pg.event.get():
            if ev.type == pg.QUIT:
                loop = 0
                alive = 0
                break
        if pg.key.get_pressed()[pg.K_s]:
            nnap = 1
        if pg.key.get_pressed()[pg.K_w]:
            nnap = 3
        if pg.key.get_pressed()[pg.K_d]:
            nnap = 0
        if pg.key.get_pressed()[pg.K_a]:
            nnap = 2
        if field[px + nma[nnap][1]][py + nma[nnap][0]] != 1 and nnap != -1:
            nap = nnap
            nnap = -1
        if pg.key.get_pressed()[pg.K_p]:
            break
        
        if(reft < pg.time.get_ticks()):
            reft = pg.time.get_ticks() + plav
            if field[px][py] == 3:
                field[px][py] = 0
                for ghost in ghosts:
                    ghost.frighten()
            if field[px][py] == 2:
                field[px][py] = 0
                score += 1
                if score == oscore:
                    loop = 0
                    break
            for ghost in ghosts:
                if(px == ghost.x and py == ghost.y and ghost.f == 0):
                    loop = 0
                    alive = 0
                    break

            px, py = move(px, py, nap)
            if field[px][py] == 2:
                field[px][py] = 0
                score += 1
                if score == oscore:
                    loop = 0
                    break
            if field[px][py] == 3:
                field[px][py] = 0
                for ghost in ghosts:
                    ghost.frighten()
            draws()
            for ghost in ghosts:
                if(px == ghost.x and py == ghost.y and ghost.f == 0):
                    loop = 0
                    alive = 0
                    break
        if(teft < pg.time.get_ticks()):
            teft = pg.time.get_ticks() + ghov
            for ghosti in range(len(ghosts)):
                if(px == ghosts[ghosti].x and py == ghosts[ghosti].y and ghosts[ghosti] == 0):
                    loop = 0
                    alive = 0
                    break
                ghosts[ghosti].proc()
                ghosts[ghosti].move()
                if(px == ghosts[ghosti].x and py == ghosts[ghosti].y and ghosts[ghosti] == 0):
                    loop = 0
                    alive = 0
                    break
                draws()
    if not alive:
        break
    tlvl += 1
pg.quit()
print("Score: ", score,"+",tlvl * 1000,"=",score +  tlvl * 1000)
